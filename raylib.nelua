--[[ This Source Code Form is subject to the terms of the Mozilla Public
     License, v. 2.0. If a copy of the MPL was not distributed with this
     file, You can obtain one at https://mozilla.org/MPL/2.0/. ]]

-- Raylib and Raymath 2.6 wrapper
-- based on raylib.h (https://github.com/raysan5/raylib/blob/2.6/src/raylib.h)
-- and raymath.h (https://github.com/raysan5/raylib/blob/2.6/src/raymath.h)

## linklib 'raylib'
## linklib 'GL'
## linklib 'glfw'
## linklib 'openal'
## linklib 'm'
## linklib 'pthread'
## linklib 'dl'
## linklib 'X11'
## linklib 'Xrandr'
## linklib 'Xinerama'
## linklib 'Xi'
## linklib 'Xxf86vm'
## linklib 'Xcursor'

## cinclude '<raylib.h>'
## cinclude '<raymath.h>'

global Raymath = @record{}
global Raylib  = @record{}
-- Enumerators Definition
-- System config flags
-- NOTE: Used for bit masks 
global ConfigFlag = @enum {
   FLAG_RESERVED = 1, -- Reserved
   FLAG_FULLSCREEN_MODE = 2, -- Set to run program in fullscreen
   FLAG_WINDOW_RESIZABLE = 4, -- Set to allow resizable window
   FLAG_WINDOW_UNDECORATED = 8, -- Set to disable window decoration frame and buttons
   FLAG_WINDOW_TRANSPARENT = 16, -- Set to allow transparent window
   FLAG_WINDOW_HIDDEN = 128, -- Set to create the window initially hidden
   FLAG_WINDOW_ALWAYS_RUN = 256, -- Set to allow windows running while minimized
   FLAG_MSAA_4X_HINT = 32, -- Set to try enabling MSAA 4X
   FLAG_VSYNC_HINT = 64, -- Set to try enabling V Sync on GPU
}

-- Trace log type 
global TraceLogType = @enum {
   LOG_ALL = 0, -- Display all logs
   LOG_TRACE = 1, 
   LOG_DEBUG = 2, 
   LOG_INFO = 3, 
   LOG_WARNING = 4, 
   LOG_ERROR = 5, 
   LOG_FATAL = 6, 
   LOG_NONE = 7, -- Disable logging
}

-- Keyboard keys 
global KeyboardKey = @enum {
   -- Alphanumeric keys
   KEY_APOSTROPHE = 39, 
   KEY_COMMA = 44, 
   KEY_MINUS = 45, 
   KEY_PERIOD = 46, 
   KEY_SLASH = 47, 
   KEY_ZERO = 48, 
   KEY_ONE = 49, 
   KEY_TWO = 50, 
   KEY_THREE = 51, 
   KEY_FOUR = 52, 
   KEY_FIVE = 53, 
   KEY_SIX = 54, 
   KEY_SEVEN = 55, 
   KEY_EIGHT = 56, 
   KEY_NINE = 57, 
   KEY_SEMICOLON = 59, 
   KEY_EQUAL = 61, 
   KEY_A = 65, 
   KEY_B = 66, 
   KEY_C = 67, 
   KEY_D = 68, 
   KEY_E = 69, 
   KEY_F = 70, 
   KEY_G = 71, 
   KEY_H = 72, 
   KEY_I = 73, 
   KEY_J = 74, 
   KEY_K = 75, 
   KEY_L = 76, 
   KEY_M = 77, 
   KEY_N = 78, 
   KEY_O = 79, 
   KEY_P = 80, 
   KEY_Q = 81, 
   KEY_R = 82, 
   KEY_S = 83, 
   KEY_T = 84, 
   KEY_U = 85, 
   KEY_V = 86, 
   KEY_W = 87, 
   KEY_X = 88, 
   KEY_Y = 89, 
   KEY_Z = 90, 
 
  -- Function keys
   KEY_SPACE = 32, 
   KEY_ESCAPE = 256, 
   KEY_ENTER = 257, 
   KEY_TAB = 258, 
   KEY_BACKSPACE = 259, 
   KEY_INSERT = 260, 
   KEY_DELETE = 261, 
   KEY_RIGHT = 262, 
   KEY_LEFT = 263, 
   KEY_DOWN = 264, 
   KEY_UP = 265, 
   KEY_PAGE_UP = 266, 
   KEY_PAGE_DOWN = 267, 
   KEY_HOME = 268, 
   KEY_END = 269, 
   KEY_CAPS_LOCK = 280, 
   KEY_SCROLL_LOCK = 281, 
   KEY_NUM_LOCK = 282, 
   KEY_PRINT_SCREEN = 283, 
   KEY_PAUSE = 284, 
   KEY_F1 = 290, 
   KEY_F2 = 291, 
   KEY_F3 = 292, 
   KEY_F4 = 293, 
   KEY_F5 = 294, 
   KEY_F6 = 295, 
   KEY_F7 = 296, 
   KEY_F8 = 297, 
   KEY_F9 = 298, 
   KEY_F10 = 299, 
   KEY_F11 = 300, 
   KEY_F12 = 301, 
   KEY_LEFT_SHIFT = 340, 
   KEY_LEFT_CONTROL = 341, 
   KEY_LEFT_ALT = 342, 
   KEY_LEFT_SUPER = 343, 
   KEY_RIGHT_SHIFT = 344, 
   KEY_RIGHT_CONTROL = 345, 
   KEY_RIGHT_ALT = 346, 
   KEY_RIGHT_SUPER = 347, 
   KEY_KB_MENU = 348, 
   KEY_LEFT_BRACKET = 91, 
   KEY_BACKSLASH = 92, 
   KEY_RIGHT_BRACKET = 93, 
   KEY_GRAVE = 96, 
 
  -- Keypad keys
   KEY_KP_0 = 320, 
   KEY_KP_1 = 321, 
   KEY_KP_2 = 322, 
   KEY_KP_3 = 323, 
   KEY_KP_4 = 324, 
   KEY_KP_5 = 325, 
   KEY_KP_6 = 326, 
   KEY_KP_7 = 327, 
   KEY_KP_8 = 328, 
   KEY_KP_9 = 329, 
   KEY_KP_DECIMAL = 330, 
   KEY_KP_DIVIDE = 331, 
   KEY_KP_MULTIPLY = 332, 
   KEY_KP_SUBTRACT = 333, 
   KEY_KP_ADD = 334, 
   KEY_KP_ENTER = 335, 
   KEY_KP_EQUAL = 336, 
}

-- Android buttons 
global AndroidButton = @enum {
   KEY_BACK = 4, 
   KEY_MENU = 82, 
   KEY_VOLUME_UP = 24, 
   KEY_VOLUME_DOWN = 25, 
}

-- Mouse buttons 
global MouseButton = @enum {
   MOUSE_LEFT_BUTTON = 0, 
   MOUSE_RIGHT_BUTTON = 1, 
   MOUSE_MIDDLE_BUTTON = 2, 
}

-- Gamepad number 
global GamepadNumber = @enum {
   GAMEPAD_PLAYER1 = 0, 
   GAMEPAD_PLAYER2 = 1, 
   GAMEPAD_PLAYER3 = 2, 
   GAMEPAD_PLAYER4 = 3, 
}

-- Gamepad Buttons 
global GamepadButton = @enum {
   -- This is here just for error checking
   GAMEPAD_BUTTON_UNKNOWN = 0, 
 
  -- This is normally a DPAD
   GAMEPAD_BUTTON_LEFT_FACE_UP = 1, 
   GAMEPAD_BUTTON_LEFT_FACE_RIGHT = 2, 
   GAMEPAD_BUTTON_LEFT_FACE_DOWN = 3, 
   GAMEPAD_BUTTON_LEFT_FACE_LEFT = 4, 
 
  -- This normally corresponds with PlayStation and Xbox controllers
 
  -- XBOX Y X A B
 
  -- PS3 Triangle Square Cross Circle
 
  -- No support for 6 button controllers though
   GAMEPAD_BUTTON_RIGHT_FACE_UP = 1, 
   GAMEPAD_BUTTON_RIGHT_FACE_RIGHT = 2, 
   GAMEPAD_BUTTON_RIGHT_FACE_DOWN = 3, 
   GAMEPAD_BUTTON_RIGHT_FACE_LEFT = 4, 
 
  -- Triggers
   GAMEPAD_BUTTON_LEFT_TRIGGER_1 = 1, 
   GAMEPAD_BUTTON_LEFT_TRIGGER_2 = 2, 
   GAMEPAD_BUTTON_RIGHT_TRIGGER_1 = 3, 
   GAMEPAD_BUTTON_RIGHT_TRIGGER_2 = 4, 
 
  -- These are buttons in the center of the gamepad
   GAMEPAD_BUTTON_MIDDLE_LEFT = 1, -- PS3 Select
   GAMEPAD_BUTTON_MIDDLE = 2, -- PS Button/XBOX Button
   GAMEPAD_BUTTON_MIDDLE_RIGHT = 3, -- PS3 Start
 
  -- These are the joystick press in buttons
   GAMEPAD_BUTTON_LEFT_THUMB = 1, 
   GAMEPAD_BUTTON_RIGHT_THUMB = 2, 
}

 
global GamepadAxis = @enum {
   -- This is here just for error checking
   GAMEPAD_AXIS_UNKNOWN = 0, 
 
  -- Left stick
   GAMEPAD_AXIS_LEFT_X = 1, 
   GAMEPAD_AXIS_LEFT_Y = 2, 
 
  -- Right stick
   GAMEPAD_AXIS_RIGHT_X = 1, 
   GAMEPAD_AXIS_RIGHT_Y = 2, 
 
  -- Pressure levels for the back triggers
   GAMEPAD_AXIS_LEFT_TRIGGER = 1, -- 1 1 pressure level
   GAMEPAD_AXIS_RIGHT_TRIGGER = 2, -- 1 1 pressure level
}

-- Shader location point type 
global ShaderLocationIndex = @enum {
   LOC_VERTEX_POSITION = 0, 
   LOC_VERTEX_TEXCOORD01 = 1, 
   LOC_VERTEX_TEXCOORD02 = 2, 
   LOC_VERTEX_NORMAL = 3, 
   LOC_VERTEX_TANGENT = 4, 
   LOC_VERTEX_COLOR = 5, 
   LOC_MATRIX_MVP = 6, 
   LOC_MATRIX_MODEL = 7, 
   LOC_MATRIX_VIEW = 8, 
   LOC_MATRIX_PROJECTION = 9, 
   LOC_VECTOR_VIEW = 10, 
   LOC_COLOR_DIFFUSE = 11, 
   LOC_COLOR_SPECULAR = 12, 
   LOC_COLOR_AMBIENT = 13, 
   LOC_MAP_ALBEDO = 14, -- LOC_MAP_DIFFUSE
   LOC_MAP_METALNESS = 15, -- LOC_MAP_SPECULAR
   LOC_MAP_NORMAL = 16, 
   LOC_MAP_ROUGHNESS = 17, 
   LOC_MAP_OCCLUSION = 18, 
   LOC_MAP_EMISSION = 19, 
   LOC_MAP_HEIGHT = 20, 
   LOC_MAP_CUBEMAP = 21, 
   LOC_MAP_IRRADIANCE = 22, 
   LOC_MAP_PREFILTER = 23, 
   LOC_MAP_BRDF = 24, 
}

-- Shader uniform data types 
global ShaderUniformDataType = @enum {
   UNIFORM_FLOAT = 0, 
   UNIFORM_VEC2 = 1, 
   UNIFORM_VEC3 = 2, 
   UNIFORM_VEC4 = 3, 
   UNIFORM_INT = 4, 
   UNIFORM_IVEC2 = 5, 
   UNIFORM_IVEC3 = 6, 
   UNIFORM_IVEC4 = 7, 
   UNIFORM_SAMPLER2D = 8, 
}

-- Material map type 
global MaterialMapType = @enum {
   MAP_ALBEDO = 0, -- MAP_DIFFUSE
   MAP_METALNESS = 1, -- MAP_SPECULAR
   MAP_NORMAL = 2, 
   MAP_ROUGHNESS = 3, 
   MAP_OCCLUSION = 4, 
   MAP_EMISSION = 5, 
   MAP_HEIGHT = 6, 
   MAP_CUBEMAP = 7, -- NOTE Uses GL_TEXTURE_CUBE_MAP
   MAP_IRRADIANCE = 8, -- NOTE Uses GL_TEXTURE_CUBE_MAP
   MAP_PREFILTER = 9, -- NOTE Uses GL_TEXTURE_CUBE_MAP
   MAP_BRDF = 10, 
}

-- Pixel formats
-- NOTE: Support depends on OpenGL version and platform 
global PixelFormat = @enum {
   UNCOMPRESSED_GRAYSCALE = 1, -- 8 bit per pixel no alpha
   UNCOMPRESSED_GRAY_ALPHA = 2, -- 8* 2 bpp 2 channels
   UNCOMPRESSED_R5G6B5 = 3, -- 16 bpp
   UNCOMPRESSED_R8G8B8 = 4, -- 24 bpp
   UNCOMPRESSED_R5G5B5A1 = 5, -- 16 bpp 1 bit alpha
   UNCOMPRESSED_R4G4B4A4 = 6, -- 16 bpp 4 bit alpha
   UNCOMPRESSED_R8G8B8A8 = 7, -- 32 bpp
   UNCOMPRESSED_R32 = 8, -- 32 bpp 1 channel float
   UNCOMPRESSED_R32G32B32 = 9, -- 32* 3 bpp 3 channels float
   UNCOMPRESSED_R32G32B32A32 = 10, -- 32* 4 bpp 4 channels float
   COMPRESSED_DXT1_RGB = 11, -- 4 bpp no alpha
   COMPRESSED_DXT1_RGBA = 12, -- 4 bpp 1 bit alpha
   COMPRESSED_DXT3_RGBA = 13, -- 8 bpp
   COMPRESSED_DXT5_RGBA = 14, -- 8 bpp
   COMPRESSED_ETC1_RGB = 15, -- 4 bpp
   COMPRESSED_ETC2_RGB = 16, -- 4 bpp
   COMPRESSED_ETC2_EAC_RGBA = 17, -- 8 bpp
   COMPRESSED_PVRT_RGB = 18, -- 4 bpp
   COMPRESSED_PVRT_RGBA = 19, -- 4 bpp
   COMPRESSED_ASTC_4x4_RGBA = 20, -- 8 bpp
   COMPRESSED_ASTC_8x8_RGBA = 21, -- 2 bpp
}

-- Texture parameters: filter mode
-- NOTE 1: Filtering considers mipmaps if available in the texture
-- NOTE 2: Filter is accordingly set for minification and magnification 
global TextureFilterMode = @enum {
   FILTER_POINT = 0, -- No filter just pixel aproximation
   FILTER_BILINEAR = 1, -- Linear filtering
   FILTER_TRILINEAR = 2, -- Trilinear filtering linear with mipmaps
   FILTER_ANISOTROPIC_4X = 3, -- Anisotropic filtering 4x
   FILTER_ANISOTROPIC_8X = 4, -- Anisotropic filtering 8x
   FILTER_ANISOTROPIC_16X = 5, -- Anisotropic filtering 16x
}

-- Cubemap layout type 
global CubemapLayoutType = @enum {
   CUBEMAP_AUTO_DETECT = 0, -- Automatically detect layout type
   CUBEMAP_LINE_VERTICAL = 1, -- Layout is defined by a vertical line with faces
   CUBEMAP_LINE_HORIZONTAL = 2, -- Layout is defined by an horizontal line with faces
   CUBEMAP_CROSS_THREE_BY_FOUR = 3, -- Layout is defined by a 3x4 cross with cubemap faces
   CUBEMAP_CROSS_FOUR_BY_THREE = 4, -- Layout is defined by a 4x3 cross with cubemap faces
   CUBEMAP_PANORAMA = 5, -- Layout is defined by a panorama image equirectangular map
}

-- Texture parameters: wrap mode 
global TextureWrapMode = @enum {
   WRAP_REPEAT = 0, -- Repeats texture in tiled mode
   WRAP_CLAMP = 1, -- Clamps texture to edge pixel in tiled mode
   WRAP_MIRROR_REPEAT = 2, -- Mirrors and repeats the texture in tiled mode
   WRAP_MIRROR_CLAMP = 3, -- Mirrors and clamps to border the texture in tiled mode
}

-- Font type, defines generation method 
global FontType = @enum {
   FONT_DEFAULT = 0, -- Default font generation anti aliased
   FONT_BITMAP = 1, -- Bitmap font generation no anti aliasing
   FONT_SDF = 2, -- SDF font generation requires external shader
}

-- Color blending modes ( pre-defined )  
global BlendMode = @enum {
   BLEND_ALPHA = 0, -- Blend textures considering alpha default
   BLEND_ADDITIVE = 1, -- Blend textures adding colors
   BLEND_MULTIPLIED = 2, -- Blend textures multiplying colors
}

-- Gestures type
-- NOTE: It could be used as flags to enable only some gestures 
global GestureType = @enum {
   GESTURE_NONE = 0, 
   GESTURE_TAP = 1, 
   GESTURE_DOUBLETAP = 2, 
   GESTURE_HOLD = 4, 
   GESTURE_DRAG = 8, 
   GESTURE_SWIPE_RIGHT = 16, 
   GESTURE_SWIPE_LEFT = 32, 
   GESTURE_SWIPE_UP = 64, 
   GESTURE_SWIPE_DOWN = 128, 
   GESTURE_PINCH_IN = 256, 
   GESTURE_PINCH_OUT = 512, 
}

-- Camera system modes 
global CameraMode = @enum {
   CAMERA_CUSTOM = 0, 
   CAMERA_FREE = 1, 
   CAMERA_ORBITAL = 2, 
   CAMERA_FIRST_PERSON = 3, 
   CAMERA_THIRD_PERSON = 4, 
}

-- Camera projection modes 
global CameraType = @enum {
   CAMERA_PERSPECTIVE = 0, 
   CAMERA_ORTHOGRAPHIC = 1, 
}

-- Type of n-patch 
global NPatchType = @enum {
   NPT_9PATCH = 0, -- Npatch defined by 3x3 tiles
   NPT_3PATCH_VERTICAL = 1, -- Npatch defined by 1x3 tiles
   NPT_3PATCH_HORIZONTAL = 2, -- Npatch defined by 3x1 tiles
}

-- Structures Definition
-- Boolean type
-- Vector2 type 
global Vector2 <cimport, nodecl> = @record{
   x: float32, 
   y: float32, 
}

-- Vector3 type 
global Vector3 <cimport, nodecl> = @record{
   x: float32, 
   y: float32, 
   z: float32, 
}

-- Vector4 type 
global Vector4 <cimport, nodecl> = @record{
   x: float32, 
   y: float32, 
   z: float32, 
   w: float32, 
}

global Quaternion: type = @Vector4 

-- Quaternion type, same as Vector4
-- Matrix type ( OpenGL style 4x4 - right handed, column major )  
global Matrix <cimport, nodecl> = @record{
   m0: float32, 
   m4: float32, 
   m8: float32, 
   m12: float32, 
   m1: float32, 
   m5: float32, 
   m9: float32, 
   m13: float32, 
   m2: float32, 
   m6: float32, 
   m10: float32, 
   m14: float32, 
   m3: float32, 
   m7: float32, 
   m11: float32, 
   m15: float32, 
}

-- Color type, RGBA ( 32bit )  
global Color <cimport, nodecl> = @record{
   r: cchar, 
   g: cchar, 
   b: cchar, 
   a: cchar, 
}

-- Rectangle type 
global Rectangle <cimport, nodecl> = @record{
   x: float32, 
   y: float32, 
   width: float32, 
   height: float32, 
}

-- Image type, bpp always RGBA ( 32bit ) 
-- NOTE: Data stored in CPU memory ( RAM )  
global Image <cimport, nodecl> = @record{
   data: pointer(void), -- Image raw data
   width: cint, -- Image base width
   height: cint, -- Image base height
   mipmaps: cint, -- Mipmap levels 1 by default
   format: cint, -- Data format PixelFormat type
}

-- Texture2D type
-- NOTE: Data stored in GPU memory 
global Texture2D <cimport, nodecl> = @record{
   id: cint, -- OpenGL texture id
   width: cint, -- Texture base width
   height: cint, -- Texture base height
   mipmaps: cint, -- Mipmap levels 1 by default
   format: cint, -- Data format PixelFormat type
}

global Texture: type = @Texture2D 

-- Texture type, same as Texture2D
-- TextureCubemap type, actually, same as Texture2D
-- RenderTexture2D type, for texture rendering 
global RenderTexture2D <cimport, nodecl> = @record{
   id: cint, -- OpenGL Framebuffer Object FBO id
   texture: Texture2D, -- Color buffer attachment texture
   depth: Texture2D, -- Depth buffer attachment texture
   depthTexture: boolean, -- Track if depth attachment is a texture or renderbuffer
}

global RenderTexture: type = @RenderTexture2D 

-- RenderTexture type, same as RenderTexture2D
-- N-Patch layout info 
global NPatchInfo <cimport, nodecl> = @record{
   sourceRec: Rectangle, -- Region in the texture
   left: cint, -- left border offset
   top: cint, -- top border offset
   right: cint, -- right border offset
   bottom: cint, -- bottom border offset
   type: cint, -- layout of the n patch 3x3 1x3 or 3x1
}

-- Font character info 
global CharInfo <cimport, nodecl> = @record{
   value: cint, -- Character value Unicode
   offsetX: cint, -- Character offset X when drawing
   offsetY: cint, -- Character offset Y when drawing
   advanceX: cint, -- Character advance position X
   image: Image, -- Character image data
}

-- Font type, includes texture and charSet array data 
global Font <cimport, nodecl> = @record{
   baseSize: cint, -- Base size default chars height
   charsCount: cint, -- Number of characters
   texture: Texture2D, -- Characters texture atlas
   recs: pointer(Rectangle), -- Characters rectangles in texture
   chars: pointer(CharInfo), -- Characters info data
}

-- Camera type, defines a camera position/orientation in 3d space 
global Camera3D <cimport, nodecl> = @record{
   position: Vector3, -- Camera position
   target: Vector3, -- Camera target it looks at
   up: Vector3, -- Camera up vector rotation over its axis
   fovy: float32, -- Camera field of view apperture in Y degrees in perspective used as near plane width in orthographic
   type: cint, -- Camera type defines projection type CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
}

global Camera: type = @Camera3D 

-- Camera2D type, defines a 2d camera 
global Camera2D <cimport, nodecl> = @record{
   offset: Vector2, -- Camera offset displacement from target
   target: Vector2, -- Camera target rotation and zoom origin
   rotation: float32, -- Camera rotation in degrees
   zoom: float32, -- Camera zoom scaling should be 1 0f by default
}

-- Vertex data definning a mesh
-- NOTE: Data stored in CPU memory ( and GPU )  
global Mesh <cimport, nodecl> = @record{
   vertexCount: cint, -- Number of vertices stored in arrays
   triangleCount: cint, -- Number of triangles stored indexed or not
   vertices: pointer(float32), -- Vertex position XYZ 3 components per vertex shader location 0
   texcoords: pointer(float32), -- Vertex texture coordinates UV 2 components per vertex shader location 1
   texcoords2: pointer(float32), -- Vertex second texture coordinates useful for lightmaps shader location 5
   normals: pointer(float32), -- Vertex normals XYZ 3 components per vertex shader location 2
   tangents: pointer(float32), -- Vertex tangents XYZW 4 components per vertex shader location 4
   colors: pointer(cchar), -- Vertex colors RGBA 4 components per vertex shader location 3
   indices: pointer(cshort), -- Vertex indices in case vertex data comes indexed
   animVertices: pointer(float32), -- Animated vertex positions after bones transformations
   animNormals: pointer(float32), -- Animated normals after bones transformations
   boneIds: pointer(cint), -- Vertex bone ids up to 4 bones influence by vertex skinning
   boneWeights: pointer(float32), -- Vertex bone weight up to 4 bones influence by vertex skinning
   vaoId: cint, -- OpenGL Vertex Array Object id
   vboId: pointer(cint), -- OpenGL Vertex Buffer Objects id default vertex data
}

-- Shader type ( generic )  
global Shader <cimport, nodecl> = @record{
   id: cint, -- Shader program id
   locs: pointer(cint), -- Shader locations array MAX_SHADER_LOCATIONS
}

-- Material texture map 
global MaterialMap <cimport, nodecl> = @record{
   texture: Texture2D, -- Material map texture
   color: Color, -- Material map color
   value: float32, -- Material map value
}

-- Material type ( generic )  
global Material <cimport, nodecl> = @record{
   shader: Shader, -- Material shader
   maps: pointer(MaterialMap), -- Material maps array MAX_MATERIAL_MAPS
   params: pointer(float32), -- Material generic parameters if required
}

-- Transformation properties 
global Transform <cimport, nodecl> = @record{
   translation: Vector3, -- Translation
   rotation: Quaternion, -- Rotation
   scale: Vector3, -- Scale
}

-- Bone information 
global BoneInfo <cimport, nodecl> = @record{
   name: array(cchar, 32), -- Bone name
   parent: cint, -- Bone parent
}

-- Model type 
global Model <cimport, nodecl> = @record{
   transform: Matrix, -- Local transform matrix
   meshCount: cint, -- Number of meshes
   meshes: pointer(Mesh), -- Meshes array
   materialCount: cint, -- Number of materials
   materials: pointer(Material), -- Materials array
   meshMaterial: pointer(cint), -- Mesh material number
   boneCount: cint, -- Number of bones
   bones: pointer(BoneInfo), -- Bones information skeleton
   bindPose: pointer(Transform), -- Bones base transformation pose
}

-- Model animation 
global ModelAnimation <cimport, nodecl> = @record{
   boneCount: cint, -- Number of bones
   bones: pointer(BoneInfo), -- Bones information skeleton
   frameCount: cint, -- Number of animation frames
   framePoses: pointer(pointer(Transform)), -- Poses array by frame
}

-- Ray type ( useful for raycast )  
global Ray <cimport, nodecl> = @record{
   position: Vector3, -- Ray position origin
   direction: Vector3, -- Ray direction
}

-- Raycast hit information 
global RayHitInfo <cimport, nodecl> = @record{
   hit: boolean, -- Did the ray hit something
   distance: float32, -- Distance to nearest hit
   position: Vector3, -- Position of nearest hit
   normal: Vector3, -- Surface normal of hit
}

-- Bounding box type 
global BoundingBox <cimport, nodecl> = @record{
   min: Vector3, -- Minimum vertex box corner
   max: Vector3, -- Maximum vertex box corner
}

-- Wave type, defines audio wave data 
global Wave <cimport, nodecl> = @record{
   sampleCount: cint, -- Total number of samples
   sampleRate: cint, -- Frequency samples per second
   sampleSize: cint, -- Bit depth bits per sample 8 16 32 24 not supported
   channels: cint, -- Number of channels 1 mono 2 stereo
   data: pointer(void), -- Buffer data pointer
}

 
global rAudioBuffer <cimport, nodecl> = @record{
}

-- Audio stream type
-- NOTE: Useful to create custom audio streams not bound to a specific file 
global AudioStream <cimport, nodecl> = @record{
   sampleRate: cint, -- Frequency samples per second
   sampleSize: cint, -- Bit depth bits per sample 8 16 32 24 not supported
   channels: cint, -- Number of channels 1 mono 2 stereo
   buffer: pointer(rAudioBuffer), -- Pointer to internal data used by the audio system
}

-- Sound source type 
global Sound <cimport, nodecl> = @record{
   sampleCount: cint, -- Total number of samples
   stream: AudioStream, -- Audio stream
}

-- Music stream type ( audio file streaming from memory ) 
-- NOTE: Anything longer than ~10 seconds should be streamed 
global Music <cimport, nodecl> = @record{
   ctxType: cint, -- Type of music context audio filetype
   ctxData: pointer(void), -- Audio context data depends on type
   sampleCount: cint, -- Total number of samples
   loopCount: cint, -- Loops count times music will play 0 means infinite loop
   stream: AudioStream, -- Audio stream
}

-- Head-Mounted-Display device parameters 
global VrDeviceInfo <cimport, nodecl> = @record{
   hResolution: cint, -- HMD horizontal resolution in pixels
   vResolution: cint, -- HMD vertical resolution in pixels
   hScreenSize: float32, -- HMD horizontal size in meters
   vScreenSize: float32, -- HMD vertical size in meters
   vScreenCenter: float32, -- HMD screen center in meters
   eyeToScreenDistance: float32, -- HMD distance between eye and display in meters
   lensSeparationDistance: float32, -- HMD lens separation distance in meters
   interpupillaryDistance: float32, -- HMD IPD distance between pupils in meters
   lensDistortionValues: array(float32, 4), -- HMD lens distortion constant parameters
   chromaAbCorrection: array(float32, 4), -- HMD chromatic aberration correction parameters
}
