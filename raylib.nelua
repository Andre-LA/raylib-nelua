global Vector2: type <cimport, nodecl> = @record{
  x: float32,
  y: float32,
}

global Vector3: type <cimport, nodecl> = @record{
  x: float32,
  y: float32,
  z: float32,
}

global Vector4: type <cimport, nodecl> = @record{
  x: float32,
  y: float32,
  z: float32,
  w: float32,
}

global Matrix: type <cimport, nodecl> = @record{
  m0: float32, m4: float32, m8: float32, m12: float32,
  m1: float32, m5: float32, m9: float32, m13: float32,
  m2: float32, m6: float32, m10: float32, m14: float32,
  m3: float32, m7: float32, m11: float32, m15: float32,
}

global Color: type <cimport, nodecl> = @record{
  r: cuchar,
  g: cuchar,
  b: cuchar,
  a: cuchar,
}

global Rectangle: type <cimport, nodecl> = @record{
  x: float32,
  y: float32,
  width: float32,
  height: float32,
}

global Image: type <cimport, nodecl> = @record{
  data: nil,
  width: cint,
  height: cint,
  mipmaps: cint,
  format: cint,
}

global Texture: type <cimport, nodecl> = @record{
  id: cuint,
  width: cint,
  height: cint,
  mipmaps: cint,
  format: cint,
}

global RenderTexture: type <cimport, nodecl> = @record{
  id: cuint,
  texture: nil,
  depth: nil,
}

global NPatchInfo: type <cimport, nodecl> = @record{
  source: nil,
  left: cint,
  top: cint,
  right: cint,
  bottom: cint,
  layout: cint,
}

global CharInfo: type <cimport, nodecl> = @record{
  value: cint,
  offsetX: cint,
  offsetY: cint,
  advanceX: cint,
  image: nil,
}

global Font: type <cimport, nodecl> = @record{
  baseSize: cint,
  charsCount: cint,
  charsPadding: cint,
  texture: nil,
  recs: nil,
  chars: nil,
}

global Camera3D: type <cimport, nodecl> = @record{
  position: nil,
  target: nil,
  up: nil,
  fovy: float32,
  projection: cint,
}

global Camera2D: type <cimport, nodecl> = @record{
  offset: nil,
  target: nil,
  rotation: float32,
  zoom: float32,
}

global Mesh: type <cimport, nodecl> = @record{
  vertexCount: cint,
  triangleCount: cint,
  vertices: float32,
  texcoords: float32,
  texcoords2: float32,
  normals: float32,
  tangents: float32,
  colors: cuchar,
  indices: cushort,
  animVertices: float32,
  animNormals: float32,
  boneIds: cint,
  boneWeights: float32,
  vaoId: cuint,
  vboId: cuint,
}

global Shader: type <cimport, nodecl> = @record{
  id: cuint,
  locs: cint,
}

global MaterialMap: type <cimport, nodecl> = @record{
  texture: nil,
  color: nil,
  value: float32,
}

global Material: type <cimport, nodecl> = @record{
  shader: nil,
  maps: nil,
  params: float32,
}

global Transform: type <cimport, nodecl> = @record{
  translation: nil,
  rotation: nil,
  scale: nil,
}

global BoneInfo: type <cimport, nodecl> = @record{
  name: cchar,
  parent: cint,
}

global Model: type <cimport, nodecl> = @record{
  transform: nil,
  meshCount: cint,
  materialCount: cint,
  meshes: nil,
  materials: nil,
  meshMaterial: cint,
  boneCount: cint,
  bones: nil,
  bindPose: nil,
}

global ModelAnimation: type <cimport, nodecl> = @record{
  boneCount: cint,
  frameCount: cint,
  bones: nil,
  framePoses: nil,
}

global Ray: type <cimport, nodecl> = @record{
  position: nil,
  direction: nil,
}

global RayHitInfo: type <cimport, nodecl> = @record{
  hit: nil,
  distance: float32,
  position: nil,
  normal: nil,
}

global BoundingBox: type <cimport, nodecl> = @record{
  min: nil,
  max: nil,
}

global Wave: type <cimport, nodecl> = @record{
  sampleCount: cuint,
  sampleRate: cuint,
  sampleSize: cuint,
  channels: cuint,
  data: nil,
}

global rAudioBuffer: type <cimport, nodecl> = @record{

}

global AudioStream: type <cimport, nodecl> = @record{
  buffer: nil,
  sampleRate: cuint,
  sampleSize: cuint,
  channels: cuint,
}

global Sound: type <cimport, nodecl> = @record{
  stream: nil,
  sampleCount: cuint,
}

global Music: type <cimport, nodecl> = @record{
  stream: nil,
  sampleCount: cuint,
  looping: nil,
  ctxType: cint,
  ctxData: nil,
}

global VrDeviceInfo: type <cimport, nodecl> = @record{
  hResolution: cint,
  vResolution: cint,
  hScreenSize: float32,
  vScreenSize: float32,
  vScreenCenter: float32,
  eyeToScreenDistance: float32,
  lensSeparationDistance: float32,
  interpupillaryDistance: float32,
  lensDistortionValues: float32,
  chromaAbCorrection: float32,
}

global VrStereoConfig: type <cimport, nodecl> = @record{
  projection: nil,
  viewOffset: nil,
  leftLensCenter: float32,
  rightLensCenter: float32,
  leftScreenCenter: float32,
  rightScreenCenter: float32,
  scale: float32,
  scaleIn: float32,
}
